import time; import os
import threading; import random
from termcolor import colored
import colorama

colorama.init()

loopFlagAssign = 0; loopFlagExp = 0
expNum = 1; assignNum = 1

BANNER1 = colored('''
                ‚ñì‚ñà‚ñà‚ñà‚ñà‚ñà‚ñÑ ‚ñì‚ñà‚ñà‚ñà‚ñà‚ñà  ‚ñÑ‚ñà‚ñà‚ñà‚ñà‚ñÑ   ‚ñí‚ñà‚ñà‚ñà‚ñà‚ñà ‚ñì‚ñà‚ñà   ‚ñà‚ñà‚ñì ‚ñà‚ñà‚ñà‚ñÑ    ‚ñà  ‚ñà‚ñà‚ñì ‚ñà‚ñà‚ñà‚ñÑ    ‚ñà  ‚ñÑ‚ñÑ‚ñÑ‚ñà‚ñà‚ñÄ‚ñÄ‚ñÄ‚ñÑ‚ñÑ‚ñÑ
                ‚ñí‚ñà‚ñà‚ñÄ ‚ñà‚ñà‚ñå‚ñì‚ñà   ‚ñÄ ‚ñí‚ñà‚ñà‚ñÄ ‚ñÄ‚ñà  ‚ñí‚ñà‚ñà‚ñí  ‚ñà‚ñà‚ñí‚ñí‚ñà‚ñà  ‚ñà‚ñà‚ñí ‚ñà‚ñà ‚ñÄ‚ñà   ‚ñà ‚ñì‚ñà‚ñà‚ñí ‚ñà‚ñà ‚ñÄ‚ñà   ‚ñà    ‚ñí‚ñà‚ñà  ‚ñí‚ñà‚ñà‚ñà‚ñà‚ñÑ
                ‚ñë‚ñà‚ñà   ‚ñà‚ñå‚ñí‚ñà‚ñà‚ñà   ‚ñí‚ñì‚ñà    ‚ñÑ ‚ñí‚ñà‚ñà‚ñë  ‚ñà‚ñà‚ñí ‚ñí‚ñà‚ñà ‚ñà‚ñà‚ñë‚ñì‚ñà‚ñà  ‚ñÄ‚ñà ‚ñà‚ñà‚ñí‚ñí‚ñà‚ñà‚ñí‚ñì‚ñà‚ñà  ‚ñÄ‚ñà ‚ñà‚ñà‚ñí   ‚ñë‚ñà‚ñà  ‚ñí‚ñà‚ñà  ‚ñÄ‚ñà‚ñÑ
                ‚ñë‚ñì‚ñà‚ñÑ   ‚ñå‚ñí‚ñì‚ñà  ‚ñÑ ‚ñí‚ñì‚ñì‚ñÑ ‚ñÑ‚ñà‚ñà‚ñí‚ñí‚ñà‚ñà   ‚ñà‚ñà‚ñë ‚ñë ‚ñê‚ñà‚ñà‚ñì‚ñë‚ñì‚ñà‚ñà‚ñí  ‚ñê‚ñå‚ñà‚ñà‚ñí‚ñë‚ñà‚ñà‚ñë‚ñì‚ñà‚ñà‚ñí  ‚ñê‚ñå‚ñà‚ñà‚ñí‚ñì‚ñà‚ñà‚ñÑ‚ñà‚ñà‚ñì ‚ñë‚ñà‚ñà‚ñÑ‚ñÑ‚ñÑ‚ñÑ‚ñà‚ñà
                ‚ñë‚ñí‚ñà‚ñà‚ñà‚ñà‚ñì ‚ñë‚ñí‚ñà‚ñà‚ñà‚ñà‚ñí‚ñí ‚ñì‚ñà‚ñà‚ñà‚ñÄ ‚ñë‚ñë ‚ñà‚ñà‚ñà‚ñà‚ñì‚ñí‚ñë ‚ñë ‚ñà‚ñà‚ñí‚ñì‚ñë‚ñí‚ñà‚ñà‚ñë   ‚ñì‚ñà‚ñà‚ñë‚ñë‚ñà‚ñà‚ñë‚ñí‚ñà‚ñà‚ñë   ‚ñì‚ñà‚ñà‚ñë ‚ñì‚ñà‚ñà‚ñà‚ñí   ‚ñì‚ñà   ‚ñì‚ñà‚ñà‚ñí
                 ‚ñí‚ñí‚ñì  ‚ñí ‚ñë‚ñë ‚ñí‚ñë ‚ñë‚ñë ‚ñë‚ñí ‚ñí  ‚ñë‚ñë ‚ñí‚ñë‚ñí‚ñë‚ñí‚ñë   ‚ñà‚ñà‚ñí‚ñí‚ñí ‚ñë ‚ñí‚ñë   ‚ñí ‚ñí ‚ñë‚ñì  ‚ñë ‚ñí‚ñë   ‚ñí ‚ñí  ‚ñí‚ñì‚ñí‚ñí‚ñë   ‚ñí‚ñí   ‚ñì‚ñí‚ñà‚ñë
                 ‚ñë ‚ñí  ‚ñí  ‚ñë ‚ñë  ‚ñë  ‚ñë  ‚ñí     ‚ñë ‚ñí ‚ñí‚ñë ‚ñì‚ñà‚ñà ‚ñë‚ñí‚ñë ‚ñë ‚ñë‚ñë   ‚ñë ‚ñí‚ñë ‚ñí ‚ñë‚ñë ‚ñë‚ñë   ‚ñë ‚ñí‚ñë ‚ñí ‚ñë‚ñí‚ñë    ‚ñí   ‚ñí‚ñí ‚ñë
                 ‚ñë ‚ñë  ‚ñë    ‚ñë   ‚ñë        ‚ñë ‚ñë ‚ñë ‚ñí  ‚ñí ‚ñí ‚ñë‚ñë     ‚ñë   ‚ñë ‚ñë  ‚ñí ‚ñë   ‚ñë   ‚ñë ‚ñë  ‚ñë ‚ñë ‚ñë    ‚ñë   ‚ñí
                   ‚ñë       ‚ñë  ‚ñë‚ñë ‚ñë          ‚ñë ‚ñë  ‚ñë ‚ñë              ‚ñë  ‚ñë           ‚ñë  ‚ñë   ‚ñë        ‚ñë  ‚ñë
                 ‚ñë             ‚ñë                 ‚ñë ‚ñë''', 'blue')
BANNER2 = colored('''                                     DecoyNinja: The Decoy Submissions Generator''', 'red')
BANNER3 = colored('''                                     -------------------------------------------''', 'blue')


def printBanner():
    print(BANNER1), print(BANNER2), print(BANNER3)


def generateExps(outputPath, loopFlagExp, expNum):
    while (loopFlagExp < exp):
        outputPath += f"Experiment {expNum}.pdf"
        if (exp != 0):
            with open(outputPath, "w") as file:
                randmFill = random.randint(500000, 1000000)
                choices = ['√•', '¬º', '√ú', '‚Ç¨', '¬¥', 'W', '', '‚Äû', ' ', '√±', '‚Äù', '√ì', 'l', 'D', '/', '‚Äò', 'N', '≈ì',
                           '¬¶', 'l', '≈æ', '¬£', ']', '√ü', '6', 'T', '1', '≈†', '√Ø', '', '√µ', 'F', 'N', '‚Ä∞', '√é', '&', ';',
                           '?', '#', '^', 'q', '%', ' ', '~', ':', 'k', '2', '¬±', '¬º', 'l', ' ', 'X', 'r', '0', 'm', '*',
                           '(', '@', '$', '?', '7', '.', 'j', '+', ',']
                for i in range(0, randmFill):
                    file.write(random.choice(choices))
            loopFlagExp += 1; expNum += 1
            outputPath = resetPath
        else:
            break


def generateAssigns(outputPath, loopFlagAssign, assignNum):
    while (loopFlagAssign < assign):
        outputPath += f"Assignment {assignNum}.pdf"
        if (assign != 0):
            with open(outputPath, "w") as file:
                randmFill = random.randint(600000, 1000000)
                choices = ['%', ' ', '[', '~', ':', 'k', '0', '2', '¬±', '¬º', 'h', ' ', '-', 'Q', '_', '', 'u', '.',
                           '3', 'L', 'f', '', '√•', 'j', '√ú', '‚Ç¨', '¬¥', ' ', 'i', '≈æ', '¬£', ']', '√ü', '6', 'T', '1',
                           '≈†', '√Ø', ' ', '√µ', 'm', 'o', '‚Ä∞', 'P', '', '√±', '‚Äù', '√ì', 'l', '√∞', ' ', '‚Äò', 'N', '≈ì',
                           '¬¶', '√é', '&', ';', '?', '#', '^', 'q', '‚Äî']
                for i in range(0, randmFill):
                    file.write(random.choice(choices))
            loopFlagAssign += 1; assignNum += 1
            outputPath = resetPath
        else:
            break


def clrscr():
    if os.name == 'posix':
        _ = os.system('clear')
    else:
        _ = os.system('cls')
    printBanner()


############### Main ###############

if __name__ == "__main__":

    printBanner()

    try:

        while (True):
            try:
                assign = int(input("\nEnter the number of assignments to decoy (Default = 1): ") or 1)
                exp = int(input("Enter the number of experiments to decoy (Default = 1): ") or 1)
                break
            except KeyboardInterrupt:
                raise KeyboardInterrupt
            except:
                clrscr()
                print("Invalid entry. Enter an integer. Try again.\n")
                continue

        while (True):
                outputPath = str(input("Enter output folder (Default = current folder):") or "./")
                outputPath += "/"
                resetPath = outputPath

                if (os.path.exists(outputPath) is True):
                    break
                else:
                    clrscr()
                    print("Either file does not exist or invalid path entered. Try again.\n")
                    continue

        threadExps = threading.Thread(target=generateExps, args=[outputPath, loopFlagExp, expNum])
        threadAssigns = threading.Thread(target=generateAssigns, args=[outputPath, loopFlagAssign, assignNum])

        clrscr()
        print("\nWorking...", end='')

        start = time.time()

        threadExps.start()
        threadAssigns.start()

        threadExps.join()
        threadAssigns.join()

        completionTime = time.time() - start

        clrscr()
        print(f"\nThe task completed successfully in {completionTime} seconds.")
        print("Press Enter to exit. GG;WP.")
        input()

    except KeyboardInterrupt:
        clrscr()
        print("\nCTRL ^C\n\nThrew a wrench in the works.")
        print("Press Enter to exit.")
        input()
